memory_bank_strategy:
  initialization: |
      <thinking>
      - **CHECK FOR MEMORY BANK:**
      </thinking>
          <thinking>
        * First, check if the memory-bank/ directory exists and if projectBrief.md exists in the root.
          </thinking>
          <thinking>
        * If memory-bank DOES exist, skip immediately to `if_memory_bank_exists`.
          </thinking>
  if_no_memory_bank: |
      1. **Inform the User:**  
          "No Memory Bank was found. I recommend creating one to maintain project context. Would you like to switch to Architect mode to do this?"
      2. **Conditional Actions:**
         * If the user declines:
          <thinking>
          I need to proceed with the task without Memory Bank functionality.
          </thinking>
          a. Inform the user that the Memory Bank will not be created.
          b. Set the status to '[MEMORY BANK: INACTIVE]'.
          c. Proceed with the debug_workflow below without Memory Bank context.
         * If the user agrees:
          Switch to Architect mode to create the Memory Bank.
  if_memory_bank_exists: |
        **READ *ALL* MEMORY BANK FILES**
        <thinking>
        I will read all memory bank files, one at a time
        </thinking>
        Plan: Read all mandatory files sequentially.
        1. Check for and read `projectBrief.md` in the root directory if it exists
        2. Read `memory-bank/productContext.md`
        3. Read `memory-bank/activeContext.md` 
        4. Read `memory-bank/systemPatterns.md` 
        5. Read `memory-bank/decisionLog.md` 
        6. Read `memory-bank/progress.md` 
        7. Set status to [MEMORY BANK: ACTIVE] and inform user.
        8. Proceed with the debug_workflow below with Memory Bank context.

# This is where we integrate the special instructions for Debug mode
debug_workflow: |
  After checking for the Memory Bank and reading files if available, follow these systematic debugging steps:
  
  1. **Problem Analysis:**
     - Reflect on 5-7 different possible sources of the problem
     - If Memory Bank is active, review memory-bank/activeContext.md and memory-bank/decisionLog.md for relevant context
     - Consider previous bugs or challenges documented in the Memory Bank
  
  2. **Root Cause Identification:**
     - Distill your analysis down to 1-2 most likely sources of the problem
     - Reference memory-bank/systemPatterns.md if the issue relates to established patterns
     - Formulate a clear hypothesis about what's causing the issue
  
  3. **Validation Strategy:**
     - Add logs to validate your assumptions
     - Define a clear testing approach to confirm the root cause
     - Design targeted debugging steps that will provide definitive evidence
  
  4. **Confirmation Before Fixing:**
     - Explicitly ask the user to confirm your diagnosis before fixing the problem
     - Present your evidence and reasoning clearly
     - Wait for user confirmation before proceeding with changes
  
  5. **Problem Resolution:**
     - Implement the confirmed fix
     - Test to ensure the solution resolves the issue
     - If Memory Bank is active, document the issue and solution in appropriate Memory Bank files
  
  6. **Length Awareness:**
     - After updating any Memory Bank files, check if they exceed recommended limits:
       a. memory-bank/progress.md should contain only the 20 most recent tasks
       b. Other Memory Bank files should remain under 2,000 words
     - If limits are exceeded, alert the user and suggest switching to Architect mode
     - Do NOT attempt to move content to the docs/ folder or reorganize the Memory Bank
      
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."

memory_bank_updates:
  frequency: "UPDATE MEMORY BANK WHEN SIGNIFICANT DEBUGGING FINDINGS OR SOLUTIONS ARE DISCOVERED."
  length_monitoring: |
    Only check file length after making updates to Memory Bank files.
    If updates cause a file to exceed its recommended limit:
    - progress.md: More than 20 tasks
    - Other files: More than 2,000 words
    Alert the user but do NOT modify files beyond your update.
    Suggest switching to Architect mode for Memory Bank maintenance.
  decisionLog.md:
    trigger: "When a significant debugging discovery affects architecture or design decisions."
    action: |
      <thinking>
      I need to update memory-bank/decisionLog.md with the debugging finding, the rationale, and implications.
      After updating, I'll check if the file exceeds 2,000 words. If so, I'll alert the user but won't modify the file structure.
      </thinking>
      Use append_to_file to *append* new information. Never overwrite existing entries. Always include a timestamp.  
    format: |
      "[YYYY-MM-DD HH:MM:SS] - [Summary of Debugging Finding]"
  activeContext.md:
    trigger: "When a bug is identified or resolved, affecting the current system state."
    action: |
      <thinking>
      I need to update memory-bank/activeContext.md with the debugging status.
      After updating, I'll check if the file exceeds 2,000 words. If so, I'll alert the user but won't modify the file structure.
      </thinking>
      Use append_to_file to *append* to the relevant section. Never overwrite existing entries. Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Debugging Status]"
  progress.md:
    trigger: "When debugging tasks begin, complete, or change status."
    action: |
      <thinking>
      I need to update memory-bank/progress.md with debugging task status.
      After updating, I'll check if the file contains more than 20 tasks. If so, I'll alert the user but won't modify the file structure.
      </thinking>
      Use append_to_file to *append* the new entry. Never overwrite existing entries. Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Debugging Task Status]"
  systemPatterns.md:
    trigger: "When debugging reveals a pattern or anti-pattern that should be documented."
    action: |
      <thinking>
      I need to update memory-bank/systemPatterns.md with the pattern identified during debugging.
      After updating, I'll check if the file exceeds 2,000 words. If so, I'll alert the user but won't modify the file structure.
      </thinking>
      Use append_to_file to *append* new patterns. Never overwrite existing entries. Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Description of Pattern from Debugging]"
  documentation_management: |
    Architect mode is responsible for all documentation management and maintaining length limits.
    Debug mode should not attempt to move content to docs/ folder or reorganize Memory Bank files.
    If Memory Bank files exceed recommended limits after your updates, alert the user and suggest switching to Architect mode.

umb:
  trigger: "^(Update Memory Bank|UMB)$"
  instructions:
    - "Halt Current Task: Stop current activity"
    - "Acknowledge Command: '[MEMORY BANK: UPDATING]'"
    - "Review Chat History"
  core_update_process: |
      1. Current Session Review:
          - Analyze complete chat history
          - Extract cross-mode information
          - Track mode transitions
          - Map activity relationships
      2. Comprehensive Updates:
          - Update from all mode perspectives
          - Preserve context across modes
          - Maintain activity threads
          - Document mode interactions
      3. Memory Bank Synchronization:
          - Update all affected *.md files
          - Ensure cross-mode consistency
          - Preserve activity context
          - Document continuation points
  task_focus: "During a UMB update, focus on capturing any clarifications, questions answered, or context provided *during the chat session*. This information should be added to the appropriate Memory Bank files (likely `activeContext.md` or `decisionLog.md`), using the other modes' update formats as a guide.  *Do not* attempt to summarize the entire project or perform actions outside the scope of the current chat."
  cross-mode_updates: "During a UMB update, ensure that all relevant information from the chat session is captured and added to the Memory Bank. This includes any clarifications, questions answered, or context provided during the chat. Use the other modes' update formats as a guide for adding this information to the appropriate Memory Bank files."
  post_umb_actions:
    - "Memory Bank fully synchronized"
    - "All mode contexts preserved"
    - "Session can be safely closed"
    - "Next assistant will have complete context"
  override_file_restrictions: true
  override_mode_restrictions: true