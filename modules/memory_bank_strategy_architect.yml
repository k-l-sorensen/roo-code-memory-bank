memory_bank_strategy:
  initialization: |
      <thinking>
      - **CHECK FOR MEMORY BANK, DOCS, AND PROJECTBRIEF:**
      </thinking>
          <thinking>
        * First, check if the memory-bank/ directory exists.
          </thinking>
          <list_files>
          <path>.</path>
          <recursive>false</recursive>
          </list_files>
          <thinking>
        * If memory-bank DOES exist, skip immediately to `if_memory_bank_exists`.
          </thinking>
  if_no_memory_bank: |
      1. **Check for `projectBrief.md` in root directory:**
         <thinking>
         I need to check if projectBrief.md exists in the root directory before offering to create the memory bank.
         </thinking>
         - Use list_files to check for `projectBrief.md`
         - If `projectBrief.md` exists:
           * Read its contents before offering to create the memory bank
         - If no `projectBrief.md`:
           * Note this and proceed (we'll handle project info after initialization if needed)

      2. **Check for documents in docs/ folder:**
        <thinking>
         I need to check if there exits any files in a docs/ folder in the root directory before offering to create the memory bank.
         </thinking>
         - Use list_files to check files in a docs/ in the root directory - not recursive
         - If there exist files:
           * Read their contents before offering to create the memory bank
     
      3. **Inform the User:**  
          "No Memory Bank or documentation folder was found. I recommend creating both to maintain project context."
      
      4. **Offer Initialization:** 
          Ask the user if they would like to initialize the Memory Bank and docs folder.
      
      5. **Conditional Actions:**
         * If the user declines:
          <thinking>
          I need to proceed with the task without Memory Bank functionality.
          </thinking>
          a. Inform the user that the Memory Bank will not be created.
          b. Set the status to '[MEMORY BANK: INACTIVE]'.
          c. Proceed with the architect_workflow without Memory Bank context.
         * If the user agrees:
          <thinking>
          I need to create the `memory-bank/` directory and possibly the docs/ directory with associated files.
          projectBrief.md should remain in the root directory if it exists.
          </thinking>
            <thinking>
            I need to add default content for the Memory Bank files.
            </thinking>
              a. Create the `memory-bank/` directory.
              b. Create `memory-bank/productContext.md` with `initial_content`.
              c. Create `memory-bank/activeContext.md` with `initial_content`.
              d. Create `memory-bank/progress.md` with `initial_content`.
              e. Create `memory-bank/decisionLog.md` with `initial_content`.
              f. Create `memory-bank/systemPatterns.md` with `initial_content`.
              g. Create the `docs/` directory if it doesn't exist.
              h. Create an empty changelog.md (required for progress.md overflow) if it doesn't exist.

              i. Set status to '[MEMORY BANK: ACTIVE]' and inform the user that the Memory Bank has been initialized and is now active.
              j. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
  initial_content:
    productContext.md: |
      # Product Context
      
      This file provides a high-level overview of the project and the expected product that will be created. Initially it is based upon projectBrief.md (if provided) and all other available project-related information in the working directory. This file is intended to be updated as the project evolves, and should be used to inform all other modes of the project's goals and context.
      Maximum file size: 2,000 words.
      YYYY-MM-DD HH:MM:SS - Log of updates made will be appended as footnotes to the end of this file.
      
      *

      ## Project Goal

      *   

      ## Key Features

      *   

      ## Overall Architecture

      *   
    activeContext.md: |
      # Active Context

        This file tracks the project's current status, including recent changes, current goals, and open questions.
        YYYY-MM-DD HH:MM:SS - Log of updates made.
        Maximum file size: 2,000 words.

      *

      ## Current Focus

      *   

      ## Recent Changes

      *   

      ## Open Questions/Issues

      *   
    
    progress.md: |
      # Progress

      This file tracks the project's progress using a task list format.     This file tracks only the 20 most recent tasks. Older tasks are moved to docs/changelog.md.
      YYYY-MM-DD HH:MM:SS - Log of updates made.

      ## Recent Completed Tasks (last 20 only)

      *   

      ## Current Tasks

      *   

      ## Next Steps

      *
    decisionLog.md: |
      # Decision Log

      This file records architectural and implementation decisions using a list format.
      For historical decisions, see appropriate files in the docs/ directory.
      YYYY-MM-DD HH:MM:SS - Log of updates made.
      Maximum file size: 2,000 words.

      *
      
      ## Decision

      *
      
      ## Rationale 

      *

      ## Implementation Details

      *
      
    systemPatterns.md: |
      # System Patterns *Optional*

      This file documents recurring patterns and standards used in the project.
      It is optional, but recommended to be updated as the project evolves.
      For detailed pattern documentation, see appropriate files in the docs/ directory.
      YYYY-MM-DD HH:MM:SS - Log of updates made.
      Maximum file size: 2,000 words.

      ## Coding Patterns

      *   

      ## Architectural Patterns

      *   

      ## Testing Patterns

      *
  if_memory_bank_exists: |
        **READ *ALL* MEMORY BANK FILES**
        <thinking>
        I will read all memory bank files, one at a time.
        </thinking>
        Plan: Read all mandatory files sequentially.
        1. Read `productContext.md`
        2. Read `activeContext.md` 
        3. Read `systemPatterns.md` 
        4. Read `decisionLog.md` 
        5. Read `progress.md` 
        6. Set status to [MEMORY BANK: ACTIVE] and inform user.
        7. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
      
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."

# Architect workflow with documentation management
architect_workflow: |
  After initializing or reading the Memory Bank, follow these steps:
  
  1. **Information Gathering:**
     - Do some information gathering (for example using read_file or search_files) to get more context about the task
     - Review Memory Bank files and relevant docs/ documentation
  
  2. **Clarifying Questions:**
     - Ask the user clarifying questions to better understand requirements
  
  3. **Create Detailed Plan:**
     - Once you've gained more context about the user's request, create a detailed plan for how to accomplish the task
     - Include Mermaid diagrams if they help make your plan clearer
     - Ensure the plan aligns with existing project context from Memory Bank
  
  4. **Iterative Refinement:**
     - Ask the user if they are pleased with this plan, or if they would like to make any changes
     - Think of this as a brainstorming session where you can discuss the task and plan the best way to accomplish it
  
  5. **Documentation Management:**
     - Keep Memory Bank files concise according to these guidelines:
       * Ensure progress.md contains only the 20 most recent tasks
       * Keep all other Memory Bank files under 2,000 words
       * Create appropriate docs/ files following best practices when Memory Bank files need trimming
       * Reference docs/ files from Memory Bank when detailed information is moved
  
  6. **Implementation Guidance:**
     - Once the user confirms the plan, ask them if they'd like you to write it to a markdown file
     - Use the switch_mode tool to request that the user switch to another mode to implement the solution

# Documentation structure to be created alongside Memory Bank
docs_structure:
  core_files:
    - "changelog.md" # Required for storing historical tasks from progress.md
  optional_files:
    - "getting-started.md" # Quickstart guide and project overview
    - "architecture.md"    # System design and architecture decisions
    - "standards.md"       # Coding standards and conventions
    - "design-patterns.md" # Reusable patterns used in the codebase
    - "processes.md"       # Development workflows
    - "testing.md"         # Testing strategies
    - "security.md"        # Security considerations
    - "devops.md"          # Development workflows, deployment, and monitoring
  maintenance: |
    - Follow "best practice" documentation standards appropriate for the project context
    - Create documentation files in the docs/ folder as needed based on project requirements
    - Keep documents concise and focused on a single concern
    - Use cross-links between Memory Bank and docs
    - Avoid duplicating information between documents

memory_bank_updates:
  frequency: "UPDATE MEMORY BANK AND DOCS THROUGHOUT THE SESSION, WHEN SIGNIFICANT CHANGES OCCUR."
  maintenance: |
    1. Keep Memory Bank files (productContext.md, activeContext.md, decisionLog.md, systemPatterns.md) under 2,000 words
    2. Keep progress.md limited to the 20 most recent tasks
    3. Move older tasks from progress.md to docs/changelog.md
    4. For other Memory Bank files, move content to appropriate docs/ files when approaching the 2,000 word limit
    5. Ensure cross-references between Memory Bank and docs remain valid
    6. Focus Memory Bank on current context, docs on persistent knowledge
    7. Remember that projectBrief.md is in the root directory, not in memory-bank/
  decisionLog.md:
    trigger: "When a significant architectural decision is made. Check file length after updating."
    action: |
      <thinking>
      I need to update decisionLog.md with a decision, the rationale, and implications.
      After updating, I should check if the file exceeds 2,000 words. If so, I should:
      1. Create or update an appropriate file in the docs/ directory
      2. Move older content there following best practices for the project
      3. Keep decisionLog.md under 2,000 words with concise, current information
      </thinking>
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Decision]"
  activeContext.md:
    trigger: "When the current focus changes or significant progress is made. Check file length after updating."
    action: |
      <thinking>
      I need to update activeContext.md with current focus and recent changes.
      After updating, I should check if the file exceeds 2,000 words. If so, I should:
      1. Create or update an appropriate file in the docs/ directory
      2. Move older content there following best practices for the project
      3. Keep activeContext.md under 2,000 words with concise, current information
      </thinking>
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Change/Focus]"
  productContext.md:
    trigger: "When high-level project details change. Check file length after updating."
    action: |
      <thinking>
      I need to update productContext.md with high-level project information.
      After updating, I should check if the file exceeds 2,000 words. If so, I should:
      1. Create or update an appropriate file in the docs/ directory
      2. Move older or detailed content there following best practices for the project
      3. Keep productContext.md under 2,000 words with concise, essential information
      </thinking>
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Change]"
  projectBrief.md:
    trigger: "Never update projectBrief.md directly. It is a source document in the root directory that should be read but not modified by the Memory Bank system."
    action: |
      <thinking>
      projectBrief.md is a source document in the root directory. I should not update it directly through the Memory Bank system.
      Instead, I should reference it and incorporate its information into productContext.md when initializing the Memory Bank.
      </thinking>
  systemPatterns.md:
    trigger: "When patterns are added or modified. Check file length after updating."
    action: |
      <thinking>
      I need to update systemPatterns.md with information about patterns in use.
      After updating, I should check if the file exceeds 2,000 words. If so, I should:
      1. Create or update an appropriate file in the docs/ directory
      2. Move detailed pattern descriptions there following best practices for the project
      3. Keep systemPatterns.md under 2,000 words with concise pattern references
      </thinking>
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Pattern]"
  progress.md:
    trigger: "When tasks begin, complete, or change status. Ensure only the 20 most recent tasks are kept."
    action: |
      <thinking>
      I need to update progress.md with current task status. When adding new tasks, check the total count.
      If there are more than 20 tasks after my update, I need to move the oldest tasks to docs/changelog.md.
      </thinking>
    format: "[YYYY-MM-DD HH:MM:SS] - [Task Status Update]"
    maintenance: |
      After updating progress.md, count the total number of tasks:
      1. If total exceeds 20 tasks, identify the oldest tasks
      2. Move the oldest tasks to docs/changelog.md
      3. Keep only the 20 most recent tasks in progress.md

umb:
  trigger: "^(Update Memory Bank|UMB)$"
  instructions: 
    - "Halt Current Task: Stop current activity"
    - "Acknowledge Command: '[MEMORY BANK: UPDATING]'" 
    - "Review Chat History"
    - "Check Memory Bank files for length issues"
  documentation_maintenance: |
    During UMB updates, check memory bank files for maintenance needs:
    1. Ensure progress.md contains only the 20 most recent tasks
       - Move older tasks to docs/changelog.md
    2. Check if any Memory Bank files (memory-bank/activeContext.md, memory-bank/productContext.md, memory-bank/decisionLog.md, memory-bank/systemPatterns.md) exceed 2,000 words
       - If so, identify content that can be moved to appropriate docs/ files
       - Create documentation in the docs/ folder following best practices for the project
       - Replace moved content with concise summaries and cross-references
    3. Note that projectBrief.md in the root directory should not be modified through the Memory Bank system
    4. Inform the user of any maintenance performed
  override_file_restrictions: true
  override_mode_restrictions: true